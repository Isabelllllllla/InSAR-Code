import os
import rasterio
from rasterio.mask import mask
from osgeo import ogr
import geopandas as gpd
import numpy as np
import math
import warnings
import matplotlib.pyplot as plt
import pandas as pd
import matplotlib.dates as mdates

warnings.filterwarnings("ignore", category=UserWarning) 

# Define the file paths
shp_file_path = 'G:/2023 Crop/Crop_2023/Winter_Barley_2023.shp'
dbf_file_path = 'G:/2023 Crop/Crop_2023/Winter_Barley_2023.dbf'

# Open the shapefile
ds = ogr.Open(shp_file_path)
if ds is None:
    raise Exception("Could not open the shapefile")

# Get the first (and presumably only) layer
layer = ds.GetLayer(0)

# Fetch some basic information about the shapefile
feature_count = layer.GetFeatureCount()
layer_defn = layer.GetLayerDefn()
field_names = [layer_defn.GetFieldDefn(i).GetName() for i in range(layer_defn.GetFieldCount())]

# Extracting a sample of features' attribute data
sample_data = []
for i in range(min(5, feature_count)):  # Limit to 5 for preview
    feature = layer.GetFeature(i)
    attributes = {field: feature.GetField(field) for field in field_names}
    sample_data.append(attributes)

# Load the shapefile
gdf = gpd.read_file(shp_file_path)

# Display basic information about the GeoDataFrame
info = {
    "Number of features": len(gdf),
    "Columns": gdf.columns.tolist(),
    "Sample data": gdf.head().to_dict(orient="records")  # Convert the first few rows to a dictionary for easy viewing
}

# Print the information for debugging
print(info)

# Define the directory containing TIF files
tif_directory_path = 'C:/Users/Windows/Desktop/2023/VH_Coherence'

# List all TIF files in the directory
file_names = [os.path.join(tif_directory_path, f) for f in os.listdir(tif_directory_path) if f.endswith('.tif')]

# Function to calculate mean and std of pixel values for each geometry
def calculate_stats_for_all_geometries(geometries, raster_path):
    stats = []
    with rasterio.open(raster_path) as src:
        for geom in geometries:
            out_image, out_transform = mask(src, [geom], crop=True, nodata=src.nodata)
            masked_data = np.ma.masked_array(out_image, mask=(out_image == src.nodata))
            if np.ma.count(masked_data) > 0:  # Check there is data
                fixed_data = np.array([x for x in list(np.array(masked_data).reshape(-1)) if not math.isnan(x)])
                if len(fixed_data) == 0:
                    mean_val = std_val = np.nan
                else:
                    mean_val = fixed_data.mean()
                    std_val = fixed_data.std()
            else:
                mean_val = std_val = np.nan  # Assign NaN if no valid data
            stats.append({"mean": mean_val, "std": std_val})
    return stats

# Function to sample raster values at given points
def sample_raster_at_points(raster_path, points):
    with rasterio.open(raster_path) as src:
        # Transform points to the raster's CRS
        points_transformed = points.to_crs(src.crs)
        # Sample the raster at the given points
        sampled_values = [x[0] for x in src.sample([(pt.x, pt.y) for pt in points_transformed.geometry])]
    return sampled_values

mean_datas = [[],[]]
std_datas = [[],[]]
dates = [[],[]]


for filename in file_names:
    # Define the path to the TIF file
    str = filename.split('_')
    date = str[-1][:-4]
    date = date.split('t')[0]
    date = date[0:4]+'-'+date[4:6]+'-'+date[6:8]
    isDecending = False
    for s in str:
        if s == '1':
            isDecending = True
        elif s == '2':
            isDecending = False
        elif s == '3':
            isDecending = False
        elif s == '4':
            isDecending = True
    
    # Open the TIF file to read its properties
    with rasterio.open(filename) as src:
        tif_crs = src.crs
        tif_bounds = src.bounds
        tif_meta = src.meta

    # Reproject the shapefile to match the TIF file's CRS
    gdf_reprojected = gdf.to_crs(tif_crs)

    # Calculate centroids of the geometries in the GeoDataFrame
    gdf_reprojected['centroid'] = gdf_reprojected.geometry.centroid

    # Sample the raster at the centroids of the geometries
    sampled_values = sample_raster_at_points(filename, gdf_reprojected['centroid'])

    # Add the sampled raster values to the GeoDataFrame
    gdf_reprojected['raster_value'] = sampled_values

    # Filter out NaN values for mean and std calculation
    fixed_values = np.array([x for x in sampled_values if not math.isnan(x)])
    mean_value = fixed_values.mean()
    std_value = fixed_values.std()
    
    mean_datas[isDecending].append(mean_value)
    std_datas[isDecending].append(std_value)
    dates[isDecending].append(date)

    mean_plus_std = [[mean + std for mean, std in zip(mean_datas[i], std_datas[i])] for i in range(2)]
mean_minus_std = [[mean - std for mean, std in zip(mean_datas[i], std_datas[i])] for i in range(2)]

# 生成2023年每天的日期
all_dates = pd.date_range(start='2023-01-01', end='2023-12-31')

# # 生成部分日期的数据，例如每月的第一天
# sparse_dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='MS')
# values = np.random.randint(10, 100, size=len(sparse_dates))

# 创建一个完整日期范围的DataFrame，并将值填充到相应日期
for i in range(2):
    df = pd.DataFrame({'Date': all_dates})
    df['Value'] = np.nan  # 初始化为NaN
    df['Value1'] = np.nan  # 初始化为NaN
    df['Value2'] = np.nan  # 初始化为NaN
    df['Var'] = np.nan  # 初始化为NaN
    df.loc[df['Date'].isin(dates[i]), 'Value'] = mean_datas[i]
    df.loc[df['Date'].isin(dates[i]), 'Value1'] = mean_plus_std[i]
    df.loc[df['Date'].isin(dates[i]), 'Value2'] = mean_minus_std[i]
    df.loc[df['Date'].isin(dates[i]), 'Var'] = std_datas[i]
    
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.errorbar(df['Date'], df['Value'], yerr=df['Var'], fmt='o', capsize=5)

    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
    ax.xaxis.set_major_locator(mdates.MonthLocator())
    fig.autofmt_xdate()

    # 用于存储结果的列表
results_descending = []
results_ascending = []

# 获取所有的 TIFF 文件
tif_files = [f for f in os.listdir(tif_dir) if f.endswith('.tif')]

# 遍历所有的 TIFF 文件
for tif_file in tif_files:
    print(tif_file)
    # 获取完整文件路径
    file_path = os.path.join(tif_dir, tif_file)

    # 解析文件名
    parts = tif_file.split('_')
    stack = parts[2]
    print(stack)
    date_str = parts[5][0:8]  # 获取日期部分
    print(date_str)
    date = pd.to_datetime(date_str, format='%Y%m%d')  # 转换成日期格式

    # 判断是 Descending 还是 Ascending
    if stack in ['1', '4']:
        orbit = 'Descending'
    elif stack in ['2', '3']:
        orbit = 'Ascending'
    else:
        continue  # 如果不符合条件，跳过

    # 读取 TIFF 文件
    with rasterio.open(file_path) as src:
        # 使用 shapefile 对图像进行裁剪
        out_image, out_transform = mask(src, shapefile.geometry, crop=True)
        out_image = out_image[0]  # 只取第一个 band

        # 计算均值和中值
        mean_val = np.mean(out_image[out_image != src.nodata])
        std_val = np.std(out_image[out_image != src.nodata])

    # 将结果添加到相应的列表
    result = [tif_file, date, mean_val, std_val]
    if orbit == 'Descending':
        results_descending.append(result)
    else:
        results_ascending.append(result)

# 获取文件夹名称
folder_name = os.path.basename(tif_dir)

# 将结果保存到 Excel 文件
columns = ['tif_name', 'date', 'mean', 'std']

df_descending = pd.DataFrame(results_descending, columns=columns)
df_ascending = pd.DataFrame(results_ascending, columns=columns)

df_descending.to_excel(os.path.join(excel_dir, f'{folder_name}_Descending.xlsx'), index=False)
print( f'{folder_name}_Descending.xlsx')
df_ascending.to_excel(os.path.join(excel_dir, f'{folder_name}_Ascending.xlsx'), index=False)

 获取所有的 Excel 文件
excel_files = [f for f in os.listdir(excel_dir) if f.endswith('.xlsx')]

# 遍历所有的 Excel 文件
for excel_file in excel_files:
    # 读取 Excel 文件
    file_path = os.path.join(excel_dir, excel_file)
    df = pd.read_excel(file_path)

    # 确保日期列为日期格式
    df['date'] = pd.to_datetime(df['date'])

    # 提取年月信息
    df['year_month'] = df['date'].dt.to_period('M')

    # 按年月分组，计算 mean 的均值和标准差
    monthly_stats = df.groupby('year_month')['mean'].agg(
        mean_value='mean',
        std_dev_mean='std'
    ).reset_index()

    # 将结果保存到新的 Excel 文件
    new_file_name = excel_file.replace('.xlsx', '_monthly.xlsx')
    new_file_path = os.path.join(excel_dir, new_file_name)

    # 将 monthly_stats 写入新的 Excel 文件
    monthly_stats.to_excel(new_file_path, index=False)

    excel_dir = r'D:\BaiduNetdiskDownload\2023\Winter_Barley__result'
output_dir = r'D:\BaiduNetdiskDownload\2023\Winter_Barley__result\charts_monthly'

# 确保输出目录存在
os.makedirs(output_dir, exist_ok=True)

# 获取所有的 `_monthly.xlsx` 文件
monthly_files = [f for f in os.listdir(excel_dir) if f.endswith('_monthly.xlsx')]

# 设置 Seaborn 样式
sns.set(style='whitegrid')

# 遍历所有的 `_monthly.xlsx` 文件
for monthly_file in monthly_files:
    # 读取 Excel 文件
    file_path = os.path.join(excel_dir, monthly_file)
    df = pd.read_excel(file_path)

    # 确保 year_month 列为日期格式
    df['year_month'] = pd.to_datetime(df['year_month'])

    # 绘制时间变化图
    plt.figure(figsize=(12, 6))
    ax = sns.lineplot(x='year_month', y='mean_value', data=df, marker='o')

    # 添加标准误差棒
    plt.errorbar(df['year_month'], df['mean_value'], yerr=df['std_dev_mean'], fmt='o', ecolor='gray', capsize=5)

    # 设置标题和标签
    plt.title(f'Monthly Mean Value Over Time - {monthly_file}')
    plt.xlabel('Year-Month')
    plt.ylabel('Mean Value')

    # 设置 x 轴范围和刻度间隔为月份
    plt.xlim(pd.Timestamp('2022-12-15'), pd.Timestamp('2023-12-15'))
    ax.xaxis.set_major_formatter(DateFormatter('%Y-%m'))
    ax.xaxis.set_major_locator(MonthLocator())

    # 自动调整 y 轴刻度
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))

    # plt.grid(True)
    plt.tight_layout()

    # 保存图像
    output_file = os.path.join(output_dir, f'{os.path.splitext(monthly_file)[0]}.png')
    plt.savefig(output_file)

    # 关闭当前图像
    plt.close()

print("所有图像已保存到:", output_dir)

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.dates import DateFormatter, MonthLocator
from matplotlib.ticker import MaxNLocator

# 文件路径
excel_dir = r'D:\BaiduNetdiskDownload\2023\Winter_Barley__result'
output_dir = r'D:\BaiduNetdiskDownload\2023\Winter_Barley__result\charts_daily'

# 确保输出目录存在
os.makedirs(output_dir, exist_ok=True)

# 获取所有的 Excel 文件（未取平均的）
excel_files = [f for f in os.listdir(excel_dir) if f.endswith('.xlsx') and not f.endswith('_monthly.xlsx')]

# 设置 Seaborn 样式
sns.set(style='whitegrid')

# 遍历所有的 Excel 文件
for excel_file in excel_files:
    # 读取 Excel 文件
    file_path = os.path.join(excel_dir, excel_file)
    df = pd.read_excel(file_path)

    # 确保日期列为日期格式
    df['date'] = pd.to_datetime(df['date'])

    # 提取日、月、年信息
    df['year_month'] = df['date'].dt.to_period('M')

    # 绘制时间变化图
    plt.figure(figsize=(12, 6))
    ax = sns.lineplot(x='date', y='mean', data=df, marker='o')

    # 添加标准误差棒
    plt.errorbar(df['date'], df['mean'], yerr=df['std'], fmt='o', ecolor='gray', capsize=5)

    # 设置标题和标签
    plt.title(f'Daily Mean Value Over Time - {excel_file}')
    plt.xlabel('Date')
    plt.ylabel('Mean Value')

    # 设置 x 轴范围和刻度间隔为月份
    plt.xlim(pd.Timestamp('2023-01-01'), pd.Timestamp('2023-12-31'))
    ax.xaxis.set_major_formatter(DateFormatter('%Y-%m'))
    ax.xaxis.set_major_locator(MonthLocator())

    # 自动调整 y 轴刻度
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))

    plt.grid(True)
    plt.tight_layout()

    # 保存图像
    output_file = os.path.join(output_dir, f'{os.path.splitext(excel_file)[0]}_daily.png')
    plt.savefig(output_file)

    # 关闭当前图像
    plt.close()

print("所有图像已保存到:", output_dir)
